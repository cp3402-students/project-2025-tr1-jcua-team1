name: Test Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: mbstring, xml
        coverage: none
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Install PHP dependencies
      run: |
        if [ -f composer.json ]; then
          # Allow the required plugin
          composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          # Install dependencies without the deprecated --no-suggest flag
          composer install --no-progress
        fi
        
    - name: Install JS dependencies
      run: |
        if [ -f package.json ]; then
          if [ -f package-lock.json ]; then
            # Use npm ci if package-lock.json exists
            npm ci --legacy-peer-deps
          else
            # Fall back to npm install if no package-lock.json
            npm install --legacy-peer-deps
          fi
        fi
        
    - name: PHP Lint
      run: |
        find . -name "*.php" -not -path "./vendor/*" -print0 | xargs -0 -n1 php -l
        
    - name: Run JavaScript/CSS linting
      run: |
        if [ -f package.json ]; then
          # Create temporary ESLint config
          echo 'module.exports = {
            env: {
              browser: true,
              es2021: true,
              jquery: true,
              node: true,
            },
            extends: [
              \'eslint:recommended\',
            ],
            parserOptions: {
              ecmaVersion: \'latest\',
              sourceType: \'module\',
            },
            rules: {
              \'no-console\': \'warn\',
              \'no-unused-vars\': \'warn\',
              \'quotes\': [\'warn\', \'single\'],
              \'semi\': [\'warn\', \'always\'],
            },
            ignorePatterns: [\'dist/**\', \'build/**\', \'vendor/**\', \'node_modules/**\'],
          };' > .eslintrc.temp.js
          
          # Create a more lenient temporary StyleLint config
          echo 'module.exports = {
            rules: {
              "indentation": null,
              "no-descending-specificity": null,
              "no-duplicate-selectors": null,
              "color-named": null,
              "color-hex-case": null,
              "block-no-empty": null,
              "max-empty-lines": null,
              "selector-class-pattern": null,
              "selector-id-pattern": null,
              "declaration-block-no-duplicate-properties": null
            },
            ignoreFiles: ["dist/**", "build/**", "vendor/**", "node_modules/**"],
          };' > .stylelintrc.temp.js
          
          # Install linting dependencies if needed (with compatible versions)
          if ! grep -q "eslint" package.json; then
            npm install --no-save --legacy-peer-deps eslint@latest
          fi
          
          # Run linting with warning output only (don't fail the build)
          echo "Running linting checks (informational only)..."
          npx eslint --ext .js --config .eslintrc.temp.js . || echo "JavaScript linting found issues (continuing anyway)"
          
          if which stylelint >/dev/null 2>&1; then
            echo "Running stylelint with existing installation..."
            npx stylelint --config .stylelintrc.temp.js "**/*.css" || echo "CSS linting found issues (continuing anyway)"
          else
            echo "Skipping CSS linting - stylelint not installed"
          fi
          
          # Clean up temporary config files
          rm .eslintrc.temp.js .stylelintrc.temp.js
        else
          echo "No package.json found. Skipping JavaScript/CSS linting."
        fi
        
    - name: Run tests
      run: |
        if [ -f composer.json ] && grep -q "test" composer.json; then
          composer run test
        elif [ -f package.json ] && grep -q "test" package.json; then
          npm test
        fi
