name: Test Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: mbstring, xml
        coverage: none
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Install PHP dependencies
      run: |
        if [ -f composer.json ]; then
          # Allow the required plugin
          composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          # Install dependencies without the deprecated --no-suggest flag
          composer install --no-progress
        fi
        
    - name: Install JS dependencies
      run: |
        if [ -f package.json ]; then
          if [ -f package-lock.json ]; then
            # Use npm ci if package-lock.json exists
            npm ci
          else
            # Fall back to npm install if no package-lock.json
            npm install
          fi
        fi
        
    - name: PHP Lint
      run: |
        find . -name "*.php" -not -path "./vendor/*" -print0 | xargs -0 -n1 php -l
        
    - name: Run JavaScript/CSS linting
      run: |
        if [ -f package.json ]; then
          # Create temporary ESLint config
          echo 'module.exports = {
            env: {
              browser: true,
              es2021: true,
              jquery: true,
              node: true,
            },
            extends: [
              "eslint:recommended",
            ],
            parserOptions: {
              ecmaVersion: "latest",
              sourceType: "module",
            },
            rules: {
              "no-console": "warn",
              "no-unused-vars": "warn",
              "quotes": ["error", "single"],
              "semi": ["error", "always"],
            },
            ignorePatterns: ["dist/**", "build/**", "vendor/**", "node_modules/**"],
          };' > .eslintrc.temp.js
          
          # Create temporary StyleLint config
          echo 'module.exports = {
            extends: ["stylelint-config-standard", "stylelint-config-wordpress"],
            rules: {
              "indentation": 2,
              "no-descending-specificity": null,
              "no-duplicate-selectors": true,
              "color-named": "never",
              "color-hex-case": "lower",
            },
            ignoreFiles: ["dist/**", "build/**", "vendor/**", "node_modules/**"],
          };' > .stylelintrc.temp.js
          
          # Install linting dependencies if needed
          if ! grep -q "eslint\|stylelint" package.json; then
            npm install --no-save eslint stylelint@13.13.1 stylelint-config-standard stylelint-config-wordpress
          fi
          
          # Run linting
          echo "Running linting checks..."
          npx eslint --ext .js --config .eslintrc.temp.js . || echo "JavaScript linting failed. Please fix the issues locally."
          npx stylelint --config .stylelintrc.temp.js "**/*.css" || echo "CSS linting failed. Please fix the issues locally."
          
          # Clean up temporary config files
          rm .eslintrc.temp.js .stylelintrc.temp.js
        else
          echo "No package.json found. Skipping JavaScript/CSS linting."
        fi
        
    - name: Run tests
      run: |
        if [ -f composer.json ] && grep -q "test" composer.json; then
          composer run test
        elif [ -f package.json ] && grep -q "test" package.json; then
          npm test
        fi
